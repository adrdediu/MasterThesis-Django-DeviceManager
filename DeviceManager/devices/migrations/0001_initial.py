# Generated by Django 5.1 on 2025-01-05 19:37

import datetime
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('address', models.TextField()),
                ('acronym', models.CharField(max_length=10, unique=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='ExtendedUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('rank', models.CharField(blank=True, choices=[('PROF', 'Profesor (Professor)'), ('CONF', 'Conferentiar (Associate Professor)'), ('LECTOR', 'Șef lucrări (Lecturer)'), ('ASIST', 'Asistent universitar (Assistant)'), ('ENG', 'Engineer'), ('None', 'None')], max_length=20)),
                ('acronym_rank', models.CharField(blank=True, choices=[('PROF', 'Prof.dr.ing.'), ('CONF', 'Conf.dr.ing.'), ('LECTOR', 'Șef lucrări dr.ing.'), ('ASIST', 'Asist.dr.ing.'), ('ENG', 'Eng.'), ('None', 'None')], max_length=20)),
                ('admin_rank', models.CharField(blank=True, choices=[('RECTOR', 'Rector'), ('PRORECTOR', 'Vice-rector'), ('DECAN', 'Decan (Dean)'), ('PRODECAN', 'Prodecan (Vice-dean)'), ('DIR_DEPT', 'Director de departament (Head of department)'), ('SEF_DISC', 'Șef de disciplină (Head of a subject)'), ('None', 'None')], max_length=20)),
                ('faculty', models.CharField(blank=True, choices=[('AC', 'Faculty of Automatic Control & Computer Engineering'), ('EE', 'Faculty of Electrical Engineering'), ('ETTI', 'Faculty of Electronics, Telecommunications & Information Technology'), ('CEBS', 'Faculty of Civil Engineering & Building Services'), ('CEEP', 'Faculty of „Cristofor Simionescu” Chemical Engineering & Environmental Protection'), ('MMIM', 'Faculty of Machine Manufacturing & Industrial Management'), ('ARCH', 'Faculty of „G. M. Cantacuzino” Architecture'), ('HGEE', 'Faculty of Hydrotechnics, Geodesy & Environmental Engineering'), ('ME', 'Faculty of Mechanical Engineering'), ('SIM', 'Faculty of Material Science & Engineering'), ('IDBM', 'Faculty of Industrial Design and Business Management')], max_length=4)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='extended_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Floor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=5)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.building')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.building')),
            ],
        ),
        migrations.CreateModel(
            name='InventorizationList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('PAUSED', 'Paused'), ('COMPLETED', 'Completed'), ('CANCELED', 'Canceled'), ('UNKNOWN', 'Unknown')], default='ACTIVE', max_length=10)),
                ('total_devices', models.IntegerField(default=0)),
                ('total_scanned', models.IntegerField(default=0)),
                ('inventory_data_file', models.FileField(blank=True, null=True, upload_to='inventorization_data/')),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.building')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_inventorizations', to=settings.AUTH_USER_MODEL)),
                ('inventory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='devices.inventory')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('serial_number', models.CharField(max_length=25, unique=True)),
                ('is_qrcode_applied', models.BooleanField(default=False)),
                ('qrcode_path', models.CharField(blank=True, max_length=255, null=True)),
                ('qrcode_target_url', models.URLField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(default=datetime.datetime.now)),
                ('updated_at', models.DateTimeField(default=datetime.datetime.now)),
                ('is_active', models.BooleanField(default=True)),
                ('deactivation_date', models.DateTimeField(blank=True, null=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.building')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.category')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_devices', to=settings.AUTH_USER_MODEL)),
                ('floor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.floor')),
                ('inventory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='devices.inventory')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='InventoryChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_type', models.CharField(blank=True, choices=[('ADD', 'Add'), ('REMOVE', 'Remove'), ('EDIT', 'Edit')], max_length=10, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.device')),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.inventory')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='device',
            name='deactivation_change',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deactivated_device', to='devices.inventorychange'),
        ),
        migrations.CreateModel(
            name='IoTDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('last_checked', models.DateTimeField(blank=True, null=True)),
                ('is_online', models.BooleanField(default=False)),
                ('token', models.CharField(blank=True, max_length=255, null=True)),
                ('mac_address', models.CharField(blank=True, max_length=17, null=True)),
                ('uptime', models.BigIntegerField(default=0)),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='iot_device', to='devices.device')),
            ],
        ),
        migrations.CreateModel(
            name='IoTDeviceEndpoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('url', models.CharField(max_length=255)),
                ('method', models.CharField(default='GET', max_length=10)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='endpoints', to='devices.iotdevice')),
            ],
            options={
                'unique_together': {('device', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=5)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.building')),
                ('floor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.floor')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='device',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.room'),
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.category')),
            ],
        ),
        migrations.AddField(
            model_name='device',
            name='subcategory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.subcategory'),
        ),
        migrations.CreateModel(
            name='DeviceScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scanned_at', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.device')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('inventory_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.inventorizationlist')),
            ],
            options={
                'unique_together': {('inventory_list', 'device')},
            },
        ),
        migrations.CreateModel(
            name='IoTDeviceResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_success', models.BooleanField(default=True)),
                ('last_status_code', models.IntegerField()),
                ('last_checked', models.DateTimeField(blank=True, null=True)),
                ('response_time', models.FloatField(default=0)),
                ('response_file', models.FileField(blank=True, max_length=255, null=True, upload_to='iot_responses/')),
                ('current_response', models.JSONField(default=dict)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='devices.iotdevice')),
                ('endpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='devices.iotdeviceendpoint')),
            ],
            options={
                'unique_together': {('device', 'endpoint', 'last_status_code')},
            },
        ),
    ]
